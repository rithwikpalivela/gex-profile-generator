import robin_stocks as rs
import os
import datetime
import pandas as pd
import matplotlib.pyplot as plt

rh_user = os.environ.get("rh_username")
rh_pass = os.environ.get("rh_password")

rs.robinhood.authentication.login(username=rh_user, password=rh_pass, expiresIn=86400, by_sms=True)

ticker = input("Enter a ticker: ")
spot_price = float(rs.robinhood.stocks.get_latest_price(ticker)[0])
print(spot_price)

options = []
expirations = []

for option in rs.robinhood.options.find_tradable_options(ticker):
    if option['expiration_date'] not in expirations:
        expirations.append(option['expiration_date'])

expirations.sort()
curr_exp = expirations[int(input("Enter an expiration: "))]

total_call_gex = 0
total_put_gex = 0
ppg = None
png = None
call_gex_by_strike_and_exp = {}
put_gex_by_strike_and_exp = {}

options = rs.robinhood.options.find_options_by_expiration(ticker, curr_exp)
for option in options:
    if 'gamma' in option and option['gamma']:
        spot_gex = float(option['gamma']) * float(option['open_interest'])

    strike = float(option['strike_price'])
    
    if option['type'] == 'call':
        if not ppg or spot_gex > call_gex_by_strike_and_exp[ppg]:
            ppg = strike
        
        call_gex_by_strike_and_exp[strike] = spot_gex
        total_call_gex += spot_gex
    elif option['type'] == 'put':
        if not png or -spot_gex < put_gex_by_strike_and_exp[png]:
            png = strike

        put_gex_by_strike_and_exp[strike] = -spot_gex
        total_put_gex -= spot_gex

call_gex_df = pd.DataFrame(call_gex_by_strike_and_exp.items(), columns=['Strike', 'GEX']).sort_values(by='Strike')
put_gex_df = pd.DataFrame(put_gex_by_strike_and_exp.items(), columns=['Strike', 'GEX']).sort_values(by='Strike')

ax = call_gex_df.plot(x='Strike', y='GEX', color='green', label='POS GEX: ' + str(round(100 * total_call_gex / (total_call_gex - total_put_gex))) + '%')
put_gex_df.plot(ax=ax, x='Strike', y='GEX', color='red', label='NEG GEX: ' + str(round(100 * total_put_gex / (total_call_gex - total_put_gex))) + '%')

plt.plot(ppg, call_gex_by_strike_and_exp[ppg], '*', markersize=12, color='green', label='PPG: ' + str(ppg))
plt.plot(png, put_gex_by_strike_and_exp[png], '*', markersize=12, color='red', label='PNG: ' + str(png))
plt.axvline(x = spot_price, color='black', linestyle='--', label='Current Price: ' + str(round(spot_price, 2)))

plt.legend()
plt.show()